import asyncio
import re
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import add_reminder, get_reminders, delete_reminder
from scheduler import schedule_reminder

router = Router()
user_states = {}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add"),
                InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫", callback_data="list"),
            ],
            [
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="delete_all")
            ]
        ]
    )
    return kb

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ HH:MM ---
def valid_time_format(time_str):
    return bool(re.match(r"^(?:[01]\d|2[0-3]):[0-5]\d$", time_str))

# --- /start ---
@router.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@router.callback_query(lambda c: c.data in ["add", "list", "delete_all"])
async def callback_handler(query: types.CallbackQuery):
    user_id = query.from_user.id
    data = query.data

    if data == "add":
        user_states[user_id] = {"action": "add"}
        await query.message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")

    elif data == "list":
        await send_reminders_list(query.message, user_id)

    elif data == "delete_all":
        reminders = get_reminders(user_id)
        if not reminders:
            await query.message.answer("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_menu())
        else:
            for r in reminders:
                delete_reminder(r[0])
            await query.message.answer("‚úÖ –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.", reply_markup=main_menu())

    await query.answer()

# --- –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è ---
async def send_reminders_list(message: types.Message, user_id: int):
    reminders = get_reminders(user_id)
    if not reminders:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=main_menu())
        return

    buttons = [
        [
            InlineKeyboardButton(
                text=f"{r[1]} –≤ {r[2]} (–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)",
                callback_data=f"delete:{r[0]}"
            )
        ]
        for r in reminders
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=kb)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@router.message()
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states:
        return

    state = user_states[user_id]

    if state.get("action") == "add":
        if "text" not in state:
            state["text"] = message.text
            await message.answer("–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
        elif "time" not in state:
            if not valid_time_format(message.text):
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ HH:MM")
                return
            state["time"] = message.text
            reminder_id = add_reminder(user_id, state["text"], state["time"])
            await message.answer(
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {state['text']} –≤ {state['time']}",
                reply_markup=main_menu()
            )
            asyncio.create_task(schedule_reminder(
                message.bot, reminder_id, user_id, state["text"], state["time"]
            ))
            user_states.pop(user_id)

# --- –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ---
@router.callback_query(lambda c: c.data and c.data.startswith("delete:"))
async def delete_callback(query: types.CallbackQuery):
    reminder_id = int(query.data.split(":")[1])
    delete_reminder(reminder_id)  # —É–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await send_reminders_list(query.message, query.from_user.id)
    await query.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
